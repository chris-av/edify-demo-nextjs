import {
  useState,
  ChangeEvent, FormEvent,
} from 'react';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { ICountry } from '@/utils/interfaces';
import { regionOpts, subregionOpts, continentOpts } from '@/data/geo-opts';
import Dropdown from '@/components/Dropdown';
import getHost from '@/utils/get-host';


interface PageProps {
  countries: ICountry[];
}

export default function Home({ countries } : PageProps) {

  const [ countryNameFilter, setCountryNameFilter ] = useState('');
  const [ regionFilter, setRegionFilter ] = useState('');
  const [ subRegionFilter, setSubRegionFilter ] = useState('');
  const [ continentFilter, setContinentFilter ] = useState('');

  const handleFilter = (event: ChangeEvent<HTMLInputElement>) => {
    if (event.target.name === 'country-name') {
      setCountryNameFilter(event.target.value);
    } 

    return;

  }

  const handleSelect = (event: ChangeEvent<HTMLSelectElement>) => {

    if (event.target.name === 'continent') {
      setContinentFilter(event.target.value);
    } 

    if (event.target.name === 'region') {
      setRegionFilter(event.target.value);
    } 

    if (event.target.name === 'subregion') {
      setSubRegionFilter(event.target.value);
    } 

    return;

  }

  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    // make request to api to get those countries that fit the filter
    const payload = {
      region: regionFilter,
      subregion: subRegionFilter,
      continent: continentFilter,
    }

    // make request to our backend
    console.log({ payload });

    return;

  }

  const resetFilters = () => {
    setRegionFilter('');
    setSubRegionFilter('');
    setContinentFilter('');
    return;
  }

  return (
    <div className="">
      <Head>
        <title>Countries Database</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="">
        <h1 className="text-center mb-4">Welcome to Countries API!!</h1>

        {/* country name, continent, region, subregion */}
        <form onSubmit={handleSubmit} className="grid grid-cols-2 border border-stone-300 rounded-lg mb-4">
          <div className="flex items-center px-3 h-16">
            <label className="mr-6">Country Name</label>
            <input 
              type="text"
              value={countryNameFilter}
              placeholder="Search for country"
              name="country-name"
              onChange={handleFilter}
              className="focus:outline-none p-2 rounded-md"
            />
          </div>

          <div className="flex items-center px-3 h-16">
            <label className="mr-6">Select Continent</label>
            <Dropdown 
              name="continent"
              value={continentFilter}
              values={continentOpts.map((c, i) => ({ key: ''+i, value: c }))}
              handler={handleSelect}
            />
          </div>

          <div className="flex items-center px-3 h-16">
            <label className="mr-6">Select Region</label>
            <Dropdown 
              name="region"
              value={regionFilter}
              values={regionOpts.map((r, i) => ({ key: ''+i, value: r }))}
              handler={handleSelect}
            />
          </div>

          <div className="flex items-center px-3 h-16">
            <label className="mr-6">Select Subregion</label>
            <Dropdown 
              name="subregion"
              value={subRegionFilter}
              values={subregionOpts.map((s, i) => ({ key: ''+i, value: s }))}
              handler={handleSelect}
            />
          </div>

          <div className="flex justify-between items-center h-16 w-full max-w-[250px] mx-4">
            <button type="submit" className="text-white bg-green-500 hover:bg-green-400 rounded-md px-4 py-2">Submit</button>
            <button onClick={() => resetFilters()} className="text-white bg-red-500 hover:bg-green-400 rounded-md px-4 py-2">Reset</button>
          </div>
        </form>

        <h2 className="mb-3">Select a country for a detailed view</h2>

        <div>
          { countries.map(({ ccn3, name, flags, languages }) => {
            const primaryLanguage = Object.keys(languages)[0];
            return (
              <div key={ccn3} className="flex justify-between items-center group border-y hover:bg-gray-100 pr-4 select-none h-[100px]">
                <Link href={`/countries/${ccn3}`} className="flex justify-start items-center cursor-pointer w-[80%] select-none">
                  <div className="relative my-2 mr-4 select-none">
                    <Image 
                      alt={name.common} 
                      src={flags.svg} 
                      width={120}
                      height={90}
                    />
                  </div>
                  <h3>{name.common}</h3>
                </Link>
                <div className="opacity-0 group-hover:opacity-20 transition-opacity ease-in select-none flex justify-end items-center w-[20%] h-full">{name.nativeName[primaryLanguage].official}</div>
              </div>
            )})
          }
        </div>

      </main>

    </div>
  );
}


export async function getServerSideProps() {

  // for the purpose of this exercise, I will merely show South America for the first view
  const endpoint = getHost();
  const params = new URLSearchParams({
    subregion: "South America"
  });

  try {
    const response = await fetch(endpoint + "/api/countries?" + params.toString());
    const response_data = await response.json();

    if (response.status !== 200) {
      throw new Error('got failed response', response_data);
    }

    const { countries } = response_data;

    return {
      props: {
        countries
      }
    }

  } catch (err) {
    console.log(err);
    return {
      props: {
        error: 'did not get a successful response',
        data: err
      }
    }
  }

}

